{
  "folder": "DSC-WM-LATAM",
  "highRiskStatisticMethod": "PERCENT",
  "highRiskStatisticPeriod": "MONTH",
  "node": "AnowEngine.Linux.apf",
  "owner": "tomas.drobisz@infinitedata.com",
  "postScript": ":SET &LHND# = PREP_PROCESS_REPORT(,,REP,\"*DEPLOYMENT_ID=*\")\n:PROCESS &LHND#\n:  SET &LINE# = GET_PROCESS_LINE(&LHND#)\n:  PRINT &LINE#\n:  SET &DEP_ID# = STR_FIND(&LINE#, \"=\")\n:  SET &DEP_ID# = ADD(&DEP_ID#, 1)\n:  SET &NEW_DEPLOYMENT_ID# = SUBSTR(&LINE#, &DEP_ID#)\n:  PUBLISH &NEW_DEPLOYMENT_ID#,,TOP\n:ENDPROCESS\n\n:IF &DEP_ID# = \"\"\n:  SET  &EXITCODE# = \"1\"\n:  PUBLISH &EXITCODE#,,TOP\n:  MODIFY_STATE RETCODE=1800\n:ENDIF\n\n:SET &RID# = PREP_PROCESS_REPORT(,,REP,\"*EXITCODE=*\")\n:PROCESS &RID#\n:  SET &LINE# = GET_PROCESS_LINE(&RID#)\n:  PRINT &LINE#\n:  SET &EXITCODE# = STR_FIND(&LINE#,\"=\")\n:  SET &EXITCODE# = ADD(&EXITCODE#,1)\n:  SET &EXITCODE# = SUBSTR(&LINE#,&EXITCODE#)\n:  PUBLISH &EXITCODE#,,WORKFLOW\n!:  IF &EXITCODE# > 0\n!:    MODIFY_STATE RETCODE=1800\n!:  ENDIF\n:ENDPROCESS\n",
  "preScript": ":SET &SYSTEM_CONFIG_DATABASE# = 'CONFIG.MCLOUD.DSC-WM-LATAM.V'\n\n:SET &SC_MCLOUD_URL#                = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_url\", 1)\n:SET &SC_MCLOUD_PROTOCOL#           = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_protocol\", 1)\n:SET &SC_MCLOUD_LOGIN#              = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_login\", 1)\n:SET &SC_MCLOUD_LOGIN_API#          = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_login_api\", 1)\n   \n:SET &SC_MCLOUD_CREATE_DEPLOYMENT#  = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_create_deployment\", 1)\n:SET &SC_MCLOUD_DELETE_DEPLOYMENT#  = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_delete_deployment\", 1)\n:SET &SC_MCLOUD_DEPLOYMENT_STATUS#  = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_deployment_status\", 1)\n:SET &SC_MCLOUD_GET_DEPLOYMENT#     = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_get_deployment\", 1)\n:SET &SC_MCLOUD_EXEC_NAS_SCRIPT#    = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_execute_nas_script\", 1)\n!:SET &SC_MCLOUD_LOGIN_OBJECT#       = GET_VAR(&SYSTEM_CONFIG_DATABASE#, \"mcloud_login_object\", 1)\n   \n:SET &SC_MCLOUD_LOGIN_URL#          = \"&SC_MCLOUD_PROTOCOL#://&SC_MCLOUD_URL#/&SC_MCLOUD_LOGIN#\"\n:SET &SC_MCLOUD_LOGIN_API_URL#      = \"&SC_MCLOUD_PROTOCOL#://&SC_MCLOUD_URL#/&SC_MCLOUD_LOGIN_API#\"\n:SET &SC_MCLOUD_CREATE_URL#         = \"&SC_MCLOUD_PROTOCOL#://&SC_MCLOUD_URL#/&SC_MCLOUD_CREATE_DEPLOYMENT#\"\n:SET &SC_MCLOUD_DELETE_URL#         = \"&SC_MCLOUD_PROTOCOL#://&SC_MCLOUD_URL#/&SC_MCLOUD_DELETE_DEPLOYMENT#\"\n:SET &SC_MCLOUD_GET_URL#            = \"&SC_MCLOUD_PROTOCOL#://&SC_MCLOUD_URL#/&SC_MCLOUD_GET_DEPLOYMENT#\"\n:SET &SC_MCLOUD_EXEC_URL#           = \"&SC_MCLOUD_PROTOCOL#://&SC_MCLOUD_URL#/&SC_MCLOUD_EXEC_NAS_SCRIPT#\"\n:SET &SC_MCLOUD_STATUS_URL#         = \"&SC_MCLOUD_PROTOCOL#://&SC_MCLOUD_URL#/&SC_MCLOUD_DEPLOYMENT_STATUS#\"\n   \n:SET &MCLOUD_LOGIN_URL# = &SC_MCLOUD_LOGIN_URL#\n:SET &MCLOUD_LOGIN_API_URL# = &SC_MCLOUD_LOGIN_API_URL#\n:SET &MCLOUD_CREATE_URL# = &SC_MCLOUD_CREATE_URL#\n:SET &MCLOUD_CREATE_URL# = STR_SUBSTITUTE(&MCLOUD_CREATE_URL#, \"{ID}\", ${IN_CATALOG_ITEM_ID#})\n\n:PUB &MCLOUD_LOGIN_URL#\n:PUB &MCLOUD_LOGIN_API_URL#\n:PUB &MCLOUD_CREATE_URL#\n\n:SET &IN_OS_VERSION_ID# = \"${OS_VERSION_ID#}\"\n:SET &IN_SOFTWARE_VERSIONS# = \"LinuxSplunk_vCenter,LinuxSIEM_vCenter\"\n:SET &IN_GSN_CMDB_SERVICE# = \"${CHILD_SERVICE#}\"\n:SET &IN_DISK01_SIZE_GB# = \"${SERVER_DISK#}\"\n:SET &IN_ACC_GSN_WORKGROUPS_INP# = \"${GSN_WORKGROUP_INP#}\"\n:SET &IN_DISK_TOOLS_SIZE_GB# = \"6\"\n:SET &IN_TIER_ID# = \"${TIER_ID#}\"\n:SET &IN_ENVIRONMENT_ID# = \"${ENVIRONMENT_ID#}\"\n:SET &IN_JDA_REBUILD_IS_PROV# = \"${JDA_REBUILD_IS_PROV#}\"\n:SET &IN_MEMORY# = \"${SERVER_RAM#}\"\n:SET &IN_DISK01_LABEL# = \"Data1\"\n:SET &IN_COMPUTE_TAG# = \"${COMPUTE_TAG#}\"\n:SET &IN_DISK02_LABEL# = \"\"\n:SET &IN_REASON# = \"Machine creation - requested via Automic #jdacustombuild\"\n:SET &IN_SUB_BLUEPRINT_OID# = \"PURE\"\n:SET &IN_DATACENTER_ID# = \"${DATACENTER_ID#}\"\n:SET &IN_DISK01_MOUNT_POINT# = \"${DISK_MOUNTPOINT#}\"\n:SET &IN_CATALOG_ITEM_ID# = \"${CATALOG_ITEM_ID#}\"\n:SET &IN_DISK02_MOUNT_POINT# = \"\"\n:SET &IN_DISK_TOOLS_COUNT# = \"1\"\n:SET &IN_REASON_FOR_REQUEST# = \"test\"\n:SET &IN_GSN_IMPACTED_BU# = \"DSC\"\n:SET &IN_REQUESTED_HOSTNAME# = \"${SERVER_NAME_NFQD#}\"\n:SET &IN_GSN_IMPACT# = \"None/Minor\"\n:SET &IN_GSN_IMPACTED_REGION# = \"EUROPE\"\n:SET &IN_DEPLOYMENT_NAME# = \"${SERVER_NAME#}-deployment\"\n:SET &IN_DISK02_SIZE_GB# = \"0\"\n:SET &IN_KEEP_FAILED_DEPLOYMENT# = \"True\"\n:SET &IN_CPU# = \"${SERVER_CPU#}\"\n:SET &IN_DISK01_COUNT# = \"1\"\n:SET &IN_DISK02_COUNT# = \"0\"\n:SET &IN_PROJECT_ID# = \"${PROJECT_ID#}\"\n:SET &IN_ACC_GSN_WORKGROUPS# = \"True\"\n:SET &IN_JDA_REBUILD_IS_PROVISIONING# = \"${JDA_REBUILD_IS_PROV#}\"\n:SET &IN_PREAPPROVED# = \"True\"\n:SET &IN_GSN_IMPACTED_COUNTRY# = \"Czechia (CZ)\"\n:SET &IN_GSN_CMDB_RTP# = \"2099-01-01T12:00:00.000Z\"\n\n:PUB &IN_OS_VERSION_ID#\n:PUB &IN_SOFTWARE_VERSIONS#\n:PUB &IN_GSN_CMDB_SERVICE#\n:PUB &IN_DISK01_SIZE_GB#\n:PUB &IN_ACC_GSN_WORKGROUPS_INP#\n:PUB &IN_DISK_TOOLS_SIZE_GB#\n:PUB &IN_TIER_ID#\n:PUB &IN_ENVIRONMENT_ID#\n:PUB &IN_JDA_REBUILD_IS_PROV#\n:PUB &IN_MEMORY#\n:PUB &IN_DISK01_LABEL#\n:PUB &IN_COMPUTE_TAG#\n:PUB &IN_DISK02_LABEL#\n:PUB &IN_REASON#\n:PUB &IN_SUB_BLUEPRINT_OID#\n:PUB &IN_DATACENTER_ID#\n:PUB &IN_DISK01_MOUNT_POINT#\n:PUB &IN_CATALOG_ITEM_ID#\n:PUB &IN_DISK02_MOUNT_POINT#\n:PUB &IN_DISK_TOOLS_COUNT#\n:PUB &IN_REASON_FOR_REQUEST#\n:PUB &IN_GSN_IMPACTED_BU#\n:PUB &IN_REQUESTED_HOSTNAME#\n:PUB &IN_GSN_IMPACT#\n:PUB &IN_GSN_IMPACTED_REGION#\n:PUB &IN_DEPLOYMENT_NAME#\n:PUB &IN_DISK02_SIZE_GB#\n:PUB &IN_KEEP_FAILED_DEPLOYMENT#\n:PUB &IN_CPU#\n:PUB &IN_DISK01_COUNT#\n:PUB &IN_DISK02_COUNT#\n:PUB &IN_PROJECT_ID#\n:PUB &IN_ACC_GSN_WORKGROUPS#\n:PUB &IN_JDA_REBUILD_IS_PROVISIONING#\n:PUB &IN_PREAPPROVED#\n:PUB &IN_GSN_IMPACTED_COUNTRY#\n:PUB &IN_GSN_CMDB_RTP#",
  "priority": "0",
  "processingType": "TASK",
  "serverNodeType": "LINUX",
  "statisticMethod": "AVERAGE",
  "statisticPeriod": "MONTH",
  "tags": 
  [
    "DSC-WM-LATAM",
    "NotMonitored"
  ],
  "taskType": "PYTHON",
  "useScripts": true,
  "customFieldValues": {
  },
  "processingCommand": {
    "script": "# CREATE DEPLOYMENT\n\nimport requests\nimport json\nimport os\nimport getpass\nimport sys\nimport time\n\nuser = str(getpass.getuser())\nhost = str(os.uname()[1])\nprint(\">> Hostname: \" + host)\nprint(\">> Username: \" + user)\nprint(\">> Login URL: ${MCLOUD_LOGIN_URL#}\")\nprint(\">> Login API URL: ${MCLOUD_LOGIN_API_URL#}\")\nprint(\">> Create deployment URL: ${MCLOUD_CREATE_URL#}\")\n\n# GET REFRESH TOKEN\ndef getRefreshToken():\n  print(\"------------------------------------------------------------------------------------------\")\n  print(\"Getting refresh token ...\")\n  print(\"------------------------------------------------------------------------------------------\")\n\n  username=\"${IN_MCLOUD_USERNAME#}\"\n  password=\"${IN_MCLOUD_PASSWORD#}\"\n  headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n  data = {\"username\":\"${IN_MCLOUD_USERNAME#}\",\"password\":\"${IN_MCLOUD_PASSWORD#}\",\"domain\":\"prg-dc.dhl.com\",\"scope\":\"\"}\n  url = \"${MCLOUD_LOGIN_URL#}\"\n\n  try:\n    resp = requests.post(url, data=json.dumps(data), auth=(username, password), headers = headers)\n    jsonResponse = json.loads(resp.text)\n    refreshToken = jsonResponse[\"refresh_token\"]\n    print(\"------------------------------------------------------------------------------------------\")\n    print(\"refreshToken = \" + refreshToken)\n    print(\"------------------------------------------------------------------------------------------\")\n    return refreshToken\n  except Exception as e:\n    print(\"------------------------------------------------------------------------------------------\")\n    print(\"ERROR: Unable to get refresh token!\")\n    print(e)\n    print(\"EXITCODE=1\")\n    print(\"------------------------------------------------------------------------------------------\")\n    exit(1)\n\n# GET ACCESS TOKEN\ndef getAccessToken(refreshToken):\n  print(\"------------------------------------------------------------------------------------------\")\n  print(\"Getting access token ...\")\n  print(\"------------------------------------------------------------------------------------------\")\n\n  data = {\"refreshToken\":\"\" + refreshToken +\"\"}\n  url = \"${MCLOUD_LOGIN_API_URL#}\"\n  headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n  try:\n    resp = requests.post(url, data=json.dumps(data), headers = headers)\n    jsonResponse = json.loads(resp.text)\n    accessToken = jsonResponse[\"token\"]\n    print(\"------------------------------------------------------------------------------------------\")\n    print(\"accessToken = \" + accessToken)\n    print(\"------------------------------------------------------------------------------------------\")\n    return accessToken\n  except Exception as e:\n    print(\"------------------------------------------------------------------------------------------\")\n    print(\"ERROR: Unable to get access token!\")\n    print(e)\n    print(\"EXITCODE=1\")\n    print(\"------------------------------------------------------------------------------------------\")\n    exit(1)\n\n# CREATE DEPLOYMENT\nrefreshToken = getRefreshToken()\naccessToken = getAccessToken(refreshToken)\n\nprint(\"------------------------------------------------------------------------------------------\")\nprint(\"Creating deployment ...\")\nprint(\"------------------------------------------------------------------------------------------\")\n\nprint(\">> deploymentName: ${IN_DEPLOYMENT_NAME#}\")\nprint(\">> preApproved: ${IN_PREAPPROVED#}\")\nprint(\">> keepFailedDeployment: ${IN_KEEP_FAILED_DEPLOYMENT#}\")\nprint(\">> requestedHostname: ${IN_REQUESTED_HOSTNAME#}\")\nprint(\">> datacenterId: ${IN_DATACENTER_ID#}\")\n#print(\">> computeTag: ${IN_COMPUTE_TAG#}\")\nprint(\">> tierId: ${IN_TIER_ID#}\")\nprint(\">> environmentId: ${IN_ENVIRONMENT_ID#}\")\nprint(\">> osVersionId: ${IN_OS_VERSION_ID#}\")\nprint(\">> subBlueprintOptionId: ${IN_SUB_BLUEPRINT_OID#}\")\nprint(\">> cpuCount: ${IN_CPU#}\")\nprint(\">> memorySizeGB: ${IN_MEMORY#}\")\nprint(\">> gsnImpact: ${IN_GSN_IMPACT#}\")\nprint(\">> gsnImpactedBU: ${IN_GSN_IMPACTED_BU#}\")\nprint(\">> gsnImpactedCountry: ${IN_GSN_IMPACTED_COUNTRY#}\")\nprint(\">> gsnImpactedRegion: ${IN_GSN_IMPACTED_REGION#}\")\nprint(\">> gsnCMDBservice: ${IN_GSN_CMDB_SERVICE#}\")\nprint(\">> gsnCMDBRTPdate: ${IN_GSN_CMDB_RTP#}\")\nprint(\">> softwareVersions: ${IN_SOFTWARE_VERSIONS#}\")\nprint(\">> reasonForRequest: ${IN_REASON_FOR_REQUEST#}\")\nprint(\">> disk01Count: ${IN_DISK01_COUNT#}\")\nprint(\">> disk01Label: ${IN_DISK01_LABEL#}\")\nprint(\">> disk01Mountpoint: ${IN_DISK01_MOUNT_POINT#}\")\nprint(\">> disk01SizeGb: ${IN_DISK01_SIZE_GB#}\")\nprint(\">> disk02Count: ${IN_DISK02_COUNT#}\")\nprint(\">> disk02Label: ${IN_DISK02_LABEL#}\")\nprint(\">> disk02Mountpoint: ${IN_DISK02_MOUNT_POINT#}\")\nprint(\">> disk02SizeGb: ${IN_DISK02_SIZE_GB#}\")\nprint(\">> diskToolsCount: ${IN_DISK_TOOLS_COUNT#}\")\nprint(\">> diskToolsSizeGb: ${IN_DISK_TOOLS_SIZE_GB#}\")\nprint(\">> accGsnWorkgroups: ${IN_ACC_GSN_WORKGROUPS#}\")\nprint(\">> accGsnWorkgroupsINP: ${IN_ACC_GSN_WORKGROUPS_INP#}\")\nprint(\">> accAdhocWorkgroups: False\")\nprint(\">> accAdhocWorkgroupsINP:\")\nprint(\">> accNewWorkgroup: False\")\nprint(\">> accNewWorkgroupINP:\")\nprint(\">> accNewWorkgroupMembersINP:\")\nprint(\">> resizeVSphereMachine: Null\")\nprint(\">> resizeVSphereBootDisk: Null\")\nprint(\">> addVSphereDataDisk: Null\")\nprint(\">> resizeVSphereDataDisk: Null\")\nprint(\">> projectId: ${IN_PROJECT_ID#}\")\nprint(\">> reason: ${IN_REASON#}\")\nprint(\">> version: Null\")\nprint(\">> jdaRebuildIsProvisioning: ${IN_JDA_REBUILD_IS_PROV#}\")\n\ndata = {\"deploymentName\":\"${IN_DEPLOYMENT_NAME#}\",\n           \"inputs\":{\n              \"jdaRebuildIsProvisioning\":${IN_JDA_REBUILD_IS_PROV#},\n              \"preApproved\":${IN_PREAPPROVED#},\n              \"keepFailedDeployment\":${IN_KEEP_FAILED_DEPLOYMENT#},\n              \"requestedHostname\":\"${IN_REQUESTED_HOSTNAME#}\",\n              \"datacenterId\":\"${IN_DATACENTER_ID#}\",\n#              \"computeTag\":\"${IN_COMPUTE_TAG#}\",\n              \"tierId\":\"${IN_TIER_ID#}\",\n              \"environmentId\":\"${IN_ENVIRONMENT_ID#}\",\n              \"osVersionId\":\"${IN_OS_VERSION_ID#}\",\n              \"subBlueprintOptionId\":\"${IN_SUB_BLUEPRINT_OID#}\",\n              \"cpuCount\":${IN_CPU#},\n              \"memorySizeGB\":${IN_MEMORY#},\n              \"gsnImpact\":\"${IN_GSN_IMPACT#}\",\n              \"gsnImpactedBU\":\"${IN_GSN_IMPACTED_BU#}\",\n              \"gsnImpactedCountry\":\"${IN_GSN_IMPACTED_COUNTRY#}\",\n              \"gsnImpactedRegion\":\"${IN_GSN_IMPACTED_REGION#}\",\n              \"gsnCMDBservice\":\"${IN_GSN_CMDB_SERVICE#}\",\n              \"gsnCMDBRTPdate\":\"${IN_GSN_CMDB_RTP#}\",\n              \"softwareVersions\":\"${IN_SOFTWARE_VERSIONS#}\",\n              \"reasonForRequest\":\"${IN_REASON_FOR_REQUEST#}\",\n              \"disk01Count\":${IN_DISK01_COUNT#},\n              \"disk01Label\":\"${IN_DISK01_LABEL#}\",\n              \"disk01Mountpoint\":\"${IN_DISK01_MOUNT_POINT#}\",\n              \"disk01SizeGb\":${IN_DISK01_SIZE_GB#},\n              \"disk02Count\":${IN_DISK02_COUNT#},\n              \"disk02Label\":\"${IN_DISK02_LABEL#}\",\n              \"disk02Mountpoint\":\"${IN_DISK02_MOUNT_POINT#}\",\n              \"disk02SizeGb\":${IN_DISK02_SIZE_GB#},\n              \"diskToolsCount\":${IN_DISK_TOOLS_COUNT#},\n              \"diskToolsSizeGb\":${IN_DISK_TOOLS_SIZE_GB#},\n              \"accGsnWorkgroups\":${IN_ACC_GSN_WORKGROUPS#},\n              \"accGsnWorkgroupsINP\":\"${IN_ACC_GSN_WORKGROUPS_INP#}\",\n              \"accAdhocWorkgroups\":False,\n              \"accAdhocWorkgroupsINP\":\"\",\n              \"accNewWorkgroup\":False,\n              \"accNewWorkgroupINP\":\"\",\n              \"accNewWorkgroupMembersINP\":\"\",\n              \"resizeVSphereMachine\":None,\n              \"resizeVSphereBootDisk\":None,\n              \"addVSphereDataDisk\":None,\n              \"resizeVSphereDataDisk\":None\n            },\n              \"projectId\":\"${IN_PROJECT_ID#}\",\n              \"reason\":\"${IN_REASON#}\",\n              \"version\":None\n}\n\nheaders = {\"Authorization\": \"Bearer \" + str(accessToken) + \"\", \"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\nurl = \"${MCLOUD_CREATE_URL#}\"\ntry:\n  resp = requests.post(url, data=json.dumps(data), headers = headers)\n  jsonResponse = json.loads(resp.text)\n  print(resp.text)\n  deploymentId = jsonResponse[0][\"deploymentId\"]\n  print(\"------------------------------------------------------------------------------------------\")\n  print(\"Create deployment executed\")\n  print(\"------------------------------------------------------------------------------------------\")\n  print(\"DEPLOYMENT_ID=\" + str(deploymentId))\n  print(\"EXITCODE=0\")\n  exit()\nexcept Exception as e:\n  print(\"------------------------------------------------------------------------------------------\")\n  print(\"ERROR: Unable to create deployment!\")\n  print(e)\n  print(\"EXITCODE=1\")\n  print(\"------------------------------------------------------------------------------------------\")\n  exit(1)\n"
  },
  "designParameters": 
  [
    {
      "allowExpressions": true,
      "defaultValue": "${TOP_MCLOUD_USERNAME}",
      "editorType": "TEXT",
      "name": "IN_MCLOUD_USERNAME#",
      "title": "IN_MCLOUD_USERNAME#"
    },
    {
      "allowExpressions": true,
      "defaultValue": "${TOP_MCLOUD_PASSWORD}",
      "editorType": "TEXT",
      "name": "IN_MCLOUD_PASSWORD#",
      "title": "IN_MCLOUD_PASSWORD#"
    }
  ]
}